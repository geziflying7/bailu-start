/**
*将显示对象作用于舞台上的模型
*/
module Core
{
    export class DisplayUtilMod extends BaseSingleton
    {
        private static GrayMatrixFilter:egret.ColorMatrixFilter = new egret.ColorMatrixFilter(
                                                                    [0.3,0.6,0,0,
                                                                      0,0.3,0.6,0,
                                                                      0,0,0.3,0.6,
                                                                      0,0,0,0,
                                                                      0,0,1,0]
                                                                    );
       /**
       *将显示对象，从父容器中移除
       *@param dis 需要移除的显示对象
       *@param resetDisplayObject 是否将一些参数初始化
       */
       public removeFromParent(dis:egret.DisplayObject,resetDisplayObject:Boolean = false):void
       {
          if(dis && dis.parent)
          {
              if(dis.parent)
              {
                  dis.parent.removeChild(dis);
              }
              if(resetDisplayObject)
              {
                dis.scaleX = dis.scaleY = dis.rotation = dis.skewX = dis.skewY = 0;
                dis.alpha = 1;
              }
          }
       }
       
       /**
       *清除显示容器内部的对象
       *@param dc 显示容器
       *@param autoDestroy 移除子显示对象时，是否同时销毁该子显示对象（自动调用destroy方法）
       *@param clearContent 移除子显示对象时，同时清除其加载的资源
       *@param clearChild  移除子显示对象时，是否清除其内部的子显示对象（逐层清除）
       */
       public clearDisplayContaner(dc:egret.DisplayObjectConteainer,autoDestroy:Boolean = false,clearContent:Boolean = false,clearChildBoolean = false):void
       {
          var dis:egret.DisplayObject;
          for(var i:number = dc.numChildren - 1;i >= 0; i--)
          {
              dis = dc.removeChildAt(i);
              if(autoDestroy&& dis["destroy"]) dis["destroy"]();
              if(clearContent)
              {
                    if(dis["texture"]) dis["texture"] = null;
                    if(dis["source"]) dis["source"] = null;
                    if(dis["text"]) dis["text"] = null;
              }
              if(clearChild && dis["numChildren"]) this.clearDisplayContainer(dis as egret.DisplayObjectContainer,clearContent,clearChild);
          }
       }
       
       /**
       *创建Bitmap对象
       *@param resName  资源名称
       *@param centerAnchor  是否将锚点居中
       *@param x    x值
       *@param y    y值
       */
       public createBitmap(resName:string,centerAnchor:Boolean = false,x:number = 0,y:number = 0):egret.Bitmap
       {
            var bmp:egret.Bitmap = new egret.Bitmap();
            bmp.texture = RES.getRes(resName);
            bmp.name = resName;
            if(centerAnchor)
            {
                bmp.anchorOffsetX = bmp.texture.textureWidth / 2;
                bmp.anchorOffsetY = bmp.texture.textureHeight / 2;
            }
            if(x != 0)bmp.x = x;
            if(y != 0)bmp.y = y;
            return bmp;
       }
       
       /**
       *异步加载位图资源到Bitmap.texture(通过资源名称加载)
       */
       public loadBitmapTexture(bmp:egret.Bitmap,resName:string):void
       {
            RES.getResAsync(resName,(data:any) => {bmp.texture = data},null);
       }
       
       /**
       *异步加载位图资源到Image.source(通过资源名称加载)
       */
       public loadImageSource(img:eui.Iamge,resName:string):void
       {
            RES.getResAsync(resName,(data:any)=>{ img.source = data},null);
       }
       
       /**
       *异步加载图像到Image(微信小游戏使用)
       */
       public loadImageByUrl(img:eui.Image,resUrl:string):void
       {
            let loader = new egret.ImageLoader();
            laoder.addlistener(egret.Event.COMPLETE, (e:egret.Event) => {
                    let loader = new egret.IamgeLoader();
                    texture._setBitmapData(e.currentTarget.data);
                    if(img.texture)img.texture.dispose();
                    img.texture = texture;
            },this);
            loader.load(resUrl);
       }
       
       /**
       *为label添加描边
       *@param label label对象
       *@param color 描边颜色
       *@param width 描边粗细
       */
       public addlableStroke(lable:eui.label,color:number,width:number):void
       {
            lable.strokeColor = color;
            lable.stroke = width;
       }
       
       /**
       *增加灰度滤镜
       *@param dis
       */
       public addGrayFlilter(dis:egret.DisplayObject):void
       {
            dis.filters = [Core.DisplayUtilMod.GrayMatrixFilter];
       }
       
       /**
       *一处灰度滤镜
       *@param dis
       */
       public removeGrayFlilter(dis:egret.DisplayObject):void
       {
            dis.filters = [];
       }
       
       /**
       *将显示对象移至屏幕中心
       *@param dis 显示对象
       */
       public moveToStageCenter(dis:egret.DisplayObject):void
       {
            if(dis && dis.stage)
            {
                var p:egret.Point = dis.localToGlobal(dis.x,dis.y);
                var dx:number = (App.LayerManager.stage.stageWidth - p.x - p.x - dis.width) / 2;
                var dy:numner = (App.LayerManager.stage.stageHeight - p.y - p.y - dis.height) / 2;
                dis.x += dx;
                dis.y += dy;
            }
       }
       
       /**
       *将显示对象的层级提升至最上层  （所在容器内部的层级）
       *@param dis 显示对象
       */
       public pushTop(dis:egret.DisplayObject):void
       {
            if(dis)
            {
                var dc:egret.DisplayObjectContaner = dis.parent;
                if(dc)
                {
                    dc.setChildIndex(dis,dc.numChildren);
                }
            }
       }
       
    }
}
